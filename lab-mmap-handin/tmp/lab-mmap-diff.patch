diff --git a/Makefile b/Makefile
index d8509b1..ff3426b 100644
--- a/Makefile
+++ b/Makefile
@@ -35,7 +35,8 @@ OBJS = \
   $K/sysfile.o \
   $K/kernelvec.o \
   $K/plic.o \
-  $K/virtio_disk.o
+  $K/virtio_disk.o \
+  $K/sysmap.o
 
 ifeq ($(LAB),pgtbl)
 OBJS += \
@@ -175,6 +176,7 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_mmaptest 
 
 
 
diff --git a/kernel/defs.h b/kernel/defs.h
index 41098f4..c388fbd 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -8,6 +8,7 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct vmaEntry;
 
 // bio.c
 void            binit(void);
@@ -185,3 +186,13 @@ void            virtio_disk_intr(void);
 
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
+
+// sysmap.c
+int map_vma_init(struct vmaEntry *vma);
+int map_vma_copy(struct vmaEntry *src, struct vmaEntry *dst);
+int map_vma_query(uint64 va);
+int map_vma_remove(int vma_offset);
+int map_readfile(int vma_offset, int offset, uint64 addr, int length);
+uint64 sys_mmap(void);
+uint64 sys_munmap(void);
+
diff --git a/kernel/proc.c b/kernel/proc.c
index ba1a9e3..76b49eb 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -6,6 +6,7 @@
 #include "proc.h"
 #include "defs.h"
 
+
 struct cpu cpus[NCPU];
 
 struct proc proc[NPROC];
@@ -47,6 +48,8 @@ procinit(void)
   initlock(&pid_lock, "nextpid");
   for(p = proc; p < &proc[NPROC]; p++) {
       initlock(&p->lock, "proc");
+	  /* init vma area */
+	  map_vma_init(p->vma);
       p->kstack = KSTACK((int) (p - proc));
   }
 }
@@ -296,12 +299,21 @@ fork(void)
       np->ofile[i] = filedup(p->ofile[i]);
   np->cwd = idup(p->cwd);
 
+  map_vma_init(np->vma);
+  map_vma_copy(p->vma, np->vma);
+  for (int i = 0; i < 16; i++) {
+	 if (p->vma[i].valid) {
+		np->vma[i].pf = filedup(p->vma[i].pf);
+	 }
+  }
   safestrcpy(np->name, p->name, sizeof(p->name));
 
   pid = np->pid;
 
   np->state = RUNNABLE;
-
+  
+  // copy virtual map address 
+ 
   release(&np->lock);
 
   return pid;
@@ -344,6 +356,13 @@ exit(int status)
   if(p == initproc)
     panic("init exiting");
 
+  // remove all map virtual address
+  for (int i = 0; i < 16; i++) {
+  	 if (p->vma[i].valid) {
+	 	map_vma_remove(i);
+  	 }
+  }
+
   // Close all open files.
   for(int fd = 0; fd < NOFILE; fd++){
     if(p->ofile[fd]){
@@ -701,3 +720,5 @@ procdump(void)
     printf("\n");
   }
 }
+
+
diff --git a/kernel/proc.h b/kernel/proc.h
index 9c16ea7..370d477 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -82,6 +82,19 @@ struct trapframe {
 
 enum procstate { UNUSED, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };
 
+/* vam entry */
+struct vmaEntry {
+	uint64 addr;
+	uint32 length;
+	uint32 permissions;
+	uint32 flag;
+	struct file *pf;
+	uint32 offset;
+	uint32 valid;
+	struct vmaEntry *next;
+	struct vmaEntry *prev;
+};
+
 // Per-process state
 struct proc {
   struct spinlock lock;
@@ -103,4 +116,5 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  struct vmaEntry vma[16];         // Process vma entry
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index c1b3670..340bc2b 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -104,6 +104,12 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_wait(void);
 extern uint64 sys_write(void);
 extern uint64 sys_uptime(void);
+extern uint64 sys_write(void);
+extern uint64 sys_uptime(void);
+extern uint64 sys_mmap(void);
+extern uint64 sys_munmap(void);
+
+
 
 static uint64 (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -127,6 +133,8 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_mmap]    sys_mmap,
+[SYS_munmap]   sys_munmap
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..c045f6e 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,6 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_mmap  22
+#define SYS_munmap  23
+
diff --git a/kernel/sysfile.c b/kernel/sysfile.c
index 5dc453b..ebf76ba 100644
--- a/kernel/sysfile.c
+++ b/kernel/sysfile.c
@@ -484,3 +484,4 @@ sys_pipe(void)
   }
   return 0;
 }
+
diff --git a/kernel/sysmap.c b/kernel/sysmap.c
new file mode 100644
index 0000000..51bfddc
--- /dev/null
+++ b/kernel/sysmap.c
@@ -0,0 +1,202 @@
+#include "types.h"
+#include "riscv.h"
+#include "defs.h"
+#include "param.h"
+#include "stat.h"
+#include "spinlock.h"
+#include "proc.h"
+#include "fs.h"
+#include "sleeplock.h"
+#include "file.h"
+#include "fcntl.h"
+#include "sysmap.h"
+
+#define max(a, b) ((a) > (b) ? (a) : (b))
+#define min(a, b) ((a) < (b) ? (a) : (b))
+
+int map_readfile(int vma_offset, int offset, uint64 addr, int length) 
+{
+	struct proc * p = myproc();
+	struct file *pf = p->vma[vma_offset].pf;
+	int ret = 0;
+	ilock(pf->ip);
+	ret = readi(pf->ip, 0, addr, offset, length);
+	iunlock(pf->ip);
+	return ret;
+}
+
+int map_writefile(struct file *pf, int offset, uint64 addr, int length) 
+{
+	int ret = 0;
+	begin_op();
+	ilock(pf->ip);
+	ret = writei(pf->ip, 1, addr, offset, length);
+	ilock(pf->ip);
+	end_op();
+	return ret;
+}
+
+
+int map_vma_init(struct vmaEntry *vma) {
+   for (int i = 0; i < MAX_ENTRY_SIZE; i++) {
+	  vma[i].valid = 0;
+   }
+   return 0;
+}
+
+int map_vma_copy(struct vmaEntry *src, struct vmaEntry *dst) {
+   for (int i = 0; i < MAX_ENTRY_SIZE; i++) {
+		if (src[i].valid) {
+		   dst[i].addr = src[i].addr;
+		   dst[i].length = src[i].length;
+		   dst[i].permissions = src[i].permissions;
+		   dst[i].flag = src[i].flag;
+		   dst[i].pf = src[i].pf;
+		   dst[i].offset = src[i].offset;
+		   dst[i].valid = 1;
+		   dst[i].pf = filedup(dst[i].pf);
+		} else {
+		   dst[i].valid = 0;
+		}
+	 }
+   return 0;
+}
+
+
+int map_vma_query(uint64 va) {
+   struct proc *p = myproc();
+   for (int i = 0; i < MAX_ENTRY_SIZE; i++) {
+   	   if (p->vma[i].valid) {
+		   int offset = va - p->vma[i].addr;
+		   if (offset >= 0 && offset < p->vma[i].length) {
+				return i;
+		   }
+   	   }
+   }
+   return -1;
+}
+
+int map_vma_add(uint64 addr, struct file *f, int len, int prot, int flag, int offset) {
+  struct proc * p = myproc();
+  
+  /* record the vma of the current process */
+  f->ref++;
+  for (int i = 0; i < MAX_ENTRY_SIZE; i++) {
+  	if (!p->vma[i].valid) {
+		p->vma[i].valid = 1;
+		p->vma[i].addr = addr;
+		p->vma[i].length = len;
+		p->vma[i].permissions = prot;
+		p->vma[i].flag = flag;
+		p->vma[i].pf = f;
+		p->vma[i].offset = offset & ~(PGSIZE - 1);
+		break;
+	}
+  }
+  return 0;
+}
+
+
+int map_vma_remove(int vma_offset) {
+	struct proc *p = myproc();
+	
+	/* remove all the pages from process */
+	if ((p->vma[vma_offset].permissions & PROT_WRITE) && p->vma[vma_offset].flag == MAP_SHARED) {
+		filewrite(p->vma[vma_offset].pf, p->vma[vma_offset].addr, p->vma[vma_offset].length);
+	}
+	uvmunmap(p->pagetable, p->vma[vma_offset].addr, p->vma[vma_offset].length / PGSIZE, 0);
+	/* remove all mapped pages */
+	p->vma[vma_offset].pf->ref--;
+	p->vma[vma_offset].valid = 0;
+	return 0;
+}
+
+int map_unmap(uint64 addr, int length) 
+{
+	int vma_offset = map_vma_query(addr);
+	if (vma_offset == -1) {
+		return -1;
+	}
+	struct proc *p = myproc();
+
+	/* remove all the pages from process */
+	if (p->vma[vma_offset].flag == MAP_SHARED) {
+		filewrite(p->vma[vma_offset].pf, p->vma[vma_offset].addr, p->vma[vma_offset].length);
+	}
+	uvmunmap(p->pagetable, p->vma[vma_offset].addr, length / PGSIZE, 0);
+	p->vma[vma_offset].length -= length;
+	p->vma[vma_offset].addr += length;
+	/* remove all mapped pages */
+	if (p->vma[vma_offset].length == 0) {
+		p->vma[vma_offset].pf->ref--;
+		p->vma[vma_offset].valid = 0;
+	}
+	return 0;
+}
+
+
+/* map files into process address spaces */
+uint64
+sys_mmap(void)
+{
+  uint64 addr;	
+  int len;
+  int prot;
+  int flag;
+  int offset;
+  int fd;
+  struct file *f;
+
+  /* parse syscall args */
+  if(argaddr(0, &addr) < 0 || argint(1, &len) < 0 || argint(2, &prot) < 0 || \
+  	 argint(3, &flag) < 0 || argint(4, &fd) < 0 || argint(5, &offset) < 0) {
+  	 return -1;
+  }
+
+  /* fd to file struct */
+  if(fd < 0 || fd >= NOFILE || (f = myproc()->ofile[fd]) == 0) {
+     return -1;
+  }
+
+  /* we check the file readable and writeable */
+  if (f->writable == 0 && flag == MAP_SHARED && (prot & PROT_WRITE)) {
+	 return -1;
+  }
+  
+  /* we add the map address at the end of virtual address */
+  addr = myproc()->sz;
+  struct proc * p = myproc();
+  if(len > 0){
+	if(p->sz + len > MAXVA) {
+	  return -1;
+	}
+	p->sz += len;
+  }
+  map_vma_add(addr, f, len, prot, flag, offset);
+  return addr;
+}
+
+
+/* unmap files into process address spaces */
+uint64
+sys_munmap(void)
+{
+	uint64 addr;	
+	int len;
+
+	/* parse syscall args */
+	if(argaddr(0, &addr) < 0 || argint(1, &len) < 0) {
+	 	return -1;
+	}
+	
+	/* we add the map address at the end of virtual address */	
+	int vma_offset = map_vma_query(addr);
+	if (vma_offset == -1) {
+		 return -1;
+	}
+  
+	/* remove all the pages from process */
+	map_unmap(addr, len);
+	return 0;
+}
+
diff --git a/kernel/sysmap.h b/kernel/sysmap.h
new file mode 100644
index 0000000..5a0ad1e
--- /dev/null
+++ b/kernel/sysmap.h
@@ -0,0 +1,10 @@
+#define MAX_ENTRY_SIZE 16
+
+int map_vma_init(struct vmaEntry *vma);
+int map_vma_copy(struct vmaEntry *src, struct vmaEntry *dst);
+int map_vma_query(uint64 va);
+int map_vma_remove(int vma_offset);
+int map_readfile(int vma_offset, int offset, uint64 addr, int length);
+uint64 sys_mmap(void);
+uint64 sys_munmap(void);
+
diff --git a/kernel/trap.c b/kernel/trap.c
index a63249e..032deae 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -68,11 +68,46 @@ usertrap(void)
   } else if((which_dev = devintr()) != 0){
     // ok
   } else {
-    printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
-    printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
-    p->killed = 1;
+	uint64 pcode = r_scause();
+	uint64 va = PGROUNDDOWN(r_stval());
+	// uint64 epc = r_sepc();
+
+	// page fault, valid virtual address, 记录trap发生的原因
+	if (pcode == 15 || pcode == 13) {
+		if(va >= p->sz || va <= p->trapframe->sp || va > MAXVA) {
+			p->killed = 1;
+			goto fail;
+		}
+		int vma_offset = map_vma_query(va);
+		if (vma_offset >= 0) {
+			// alloc a page
+		  	char *mem = kalloc();  
+		    if(mem == 0){
+		        p->killed = 1;
+		   		goto fail;
+			}
+			memset(mem, 0, PGSIZE);
+			int offset = p->vma[vma_offset].offset + PGROUNDDOWN(va - p->vma[vma_offset].addr);
+			printf("get mmap page fault! va = %p\n", va);
+			map_readfile(vma_offset, offset, (uint64)mem, PGSIZE);
+
+			// mapper a page for va
+			if(mappages(p->pagetable,PGROUNDDOWN(va), PGSIZE, (uint64)mem, (p->vma[vma_offset].permissions << 1) | PTE_U) != 0){
+			    kfree(mem);
+				printf("get mmap page fault! va = %p\n", va);
+				p->killed = 1;
+		   		goto fail;
+			}
+			// p->trapframe->epc += epc;
+		}
+	}else {
+		printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
+    	printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
+		p->killed = 1;
+	}
   }
-
+  
+fail:
   if(p->killed)
     exit(-1);
 
diff --git a/kernel/vm.c b/kernel/vm.c
index b47f111..18692fb 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -171,8 +171,9 @@ uvmunmap(pagetable_t pagetable, uint64 va, uint64 npages, int do_free)
   for(a = va; a < va + npages*PGSIZE; a += PGSIZE){
     if((pte = walk(pagetable, a, 0)) == 0)
       panic("uvmunmap: walk");
-    if((*pte & PTE_V) == 0)
-      panic("uvmunmap: not mapped");
+    if((*pte & PTE_V) == 0) {
+		continue;
+    }
     if(PTE_FLAGS(*pte) == PTE_V)
       panic("uvmunmap: not a leaf");
     if(do_free){
@@ -305,8 +306,9 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   for(i = 0; i < sz; i += PGSIZE){
     if((pte = walk(old, i, 0)) == 0)
       panic("uvmcopy: pte should exist");
-    if((*pte & PTE_V) == 0)
-      panic("uvmcopy: page not present");
+    if((*pte & PTE_V) == 0) {
+      	continue;
+    }
     pa = PTE2PA(*pte);
     flags = PTE_FLAGS(*pte);
     if((mem = kalloc()) == 0)
diff --git a/user/mmaptest.c b/user/mmaptest.c
index 0819622..f279a81 100644
--- a/user/mmaptest.c
+++ b/user/mmaptest.c
@@ -130,6 +130,7 @@ mmap_test(void)
   _v1(p);
   for (i = 0; i < PGSIZE*2; i++)
     p[i] = 'Z';
+  
   if (munmap(p, PGSIZE*2) == -1)
     err("munmap (2)");
 
@@ -165,10 +166,12 @@ mmap_test(void)
   _v1(p);
 
   // write the mapped memory.
-  for (i = 0; i < PGSIZE*2; i++)
+  for (i = 0; i < PGSIZE*2; i++){
     p[i] = 'Z';
-
+  }
+  
   // unmap just the first two of three pages of mapped memory.
+  printf("unmap \n\r");
   if (munmap(p, PGSIZE*2) == -1)
     err("munmap (3)");
   
@@ -267,13 +270,15 @@ fork_test(void)
   char *p2 = mmap(0, PGSIZE*2, PROT_READ, MAP_SHARED, fd, 0);
   if (p2 == MAP_FAILED)
     err("mmap (5)");
-
+  
   // read just 2nd page.
   if(*(p1+PGSIZE) != 'A')
     err("fork mismatch (1)");
-
+  printf("666\n");
   if((pid = fork()) < 0)
     err("fork");
+  
+  printf("777\n");
   if (pid == 0) {
     _v1(p1);
     munmap(p1, PGSIZE); // just the first page
diff --git a/user/user.h b/user/user.h
index b71ecda..dd7915b 100644
--- a/user/user.h
+++ b/user/user.h
@@ -23,6 +23,13 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int sleep(int);
+int uptime(void);
+void *mmap(const void *addr, int length, int prot, int flags,
+           int fd, int offset);
+int munmap(const void *addr, int length);
+
+
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..d23b9cc 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("mmap");
+entry("munmap");
