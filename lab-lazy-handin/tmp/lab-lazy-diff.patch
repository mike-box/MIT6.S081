diff --git a/kernel/defs.h b/kernel/defs.h
index 4b9bbc0..52ef0d5 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -171,6 +171,7 @@ uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+void            vmprint(pagetable_t);
 
 // plic.c
 void            plicinit(void);
diff --git a/kernel/riscv.h b/kernel/riscv.h
index 0aec003..33e7d55 100644
--- a/kernel/riscv.h
+++ b/kernel/riscv.h
@@ -331,6 +331,7 @@ sfence_vma()
 #define PTE_W (1L << 2)
 #define PTE_X (1L << 3)
 #define PTE_U (1L << 4) // 1 -> user can access
+#define PTE_A (1L << 5)
 
 // shift a physical address to the right place for a PTE.
 #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index e8bcda9..441de7e 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -41,14 +41,22 @@ sys_wait(void)
 uint64
 sys_sbrk(void)
 {
-  int addr;
+  uint64 addr;
   int n;
+  struct proc * p = myproc();
 
   if(argint(0, &n) < 0)
     return -1;
-  addr = myproc()->sz;
-  if(growproc(n) < 0)
-    return -1;
+
+  addr = p->sz;
+  if(n > 0){
+  	if(p->sz + n > MAXVA) return -1;
+  	p->sz += n;
+  }else{
+	if(growproc(n) < 0)
+		return -1;
+  }
+  
   return addr;
 }
 
diff --git a/kernel/trap.c b/kernel/trap.c
index a63249e..a0fc03e 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -68,11 +68,41 @@ usertrap(void)
   } else if((which_dev = devintr()) != 0){
     // ok
   } else {
-    printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
-    printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
-    p->killed = 1;
+    uint64 pcode = r_scause();
+	uint64 va = r_stval();
+	uint64 epc = r_sepc();
+	
+	// page fault, valid virtual address
+  	if(pcode == 15 || pcode == 13){
+		if(va >= p->sz || va <= p->trapframe->sp || va > MAXVA){
+			p->killed = 1;
+			goto fail;
+		}
+		
+		char *mem = kalloc();		
+	    if(mem == 0){
+	        p->killed = 1;
+			goto fail;
+	    }
+		memset(mem,0,PGSIZE);
+		//printf("before map:\n\r");
+		//vmprint(p->pagetable);
+		if(mappages(p->pagetable,PGROUNDDOWN(va),PGSIZE,(uint64)mem, PTE_W|PTE_X|PTE_R|PTE_U) != 0){
+			kfree(mem);
+			p->killed = 1;
+			goto fail;
+		}
+		//printf("after map:\n\r");
+		//vmprint(p->pagetable);
+		p->trapframe->epc = epc;  
+	}else{
+	    printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
+	    printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
+	    p->killed = 1;
+	}
   }
 
+fail:
   if(p->killed)
     exit(-1);
 
diff --git a/kernel/vm.c b/kernel/vm.c
index bccb405..f53320e 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -5,6 +5,8 @@
 #include "riscv.h"
 #include "defs.h"
 #include "fs.h"
+#include "spinlock.h"
+#include "proc.h"
 
 /*
  * the kernel's page table.
@@ -101,12 +103,25 @@ walkaddr(pagetable_t pagetable, uint64 va)
     return 0;
 
   pte = walk(pagetable, va, 0);
-  if(pte == 0)
-    return 0;
-  if((*pte & PTE_V) == 0)
-    return 0;
-  if((*pte & PTE_U) == 0)
+  if(pte == 0){
+	return 0;
+  }
+  if((*pte & PTE_V) == 0){
+  	struct proc *p = myproc();
+	if(va >= p->sz) return 0;
+	
+	char *mem = kalloc();
+	if(mem == 0) return 0;
+	if(mappages(pagetable,PGROUNDDOWN(va),PGSIZE,(uint64)mem, PTE_W|PTE_X|PTE_R|PTE_U) != 0){
+		kfree(mem);
+		return 0;
+	}	
+	return (uint64)mem;
+  }
+  
+  if((*pte & PTE_U) == 0){
     return 0;
+  }
   pa = PTE2PA(*pte);
   return pa;
 }
@@ -180,10 +195,14 @@ uvmunmap(pagetable_t pagetable, uint64 va, uint64 npages, int do_free)
     panic("uvmunmap: not aligned");
 
   for(a = va; a < va + npages*PGSIZE; a += PGSIZE){
-    if((pte = walk(pagetable, a, 0)) == 0)
-      panic("uvmunmap: walk");
-    if((*pte & PTE_V) == 0)
-      panic("uvmunmap: not mapped");
+    if((pte = walk(pagetable, a, 0)) == 0){
+	  continue;
+    }
+	
+	if((*pte & PTE_V) == 0){
+      continue;
+	}
+       
     if(PTE_FLAGS(*pte) == PTE_V)
       panic("uvmunmap: not a leaf");
     if(do_free){
@@ -248,6 +267,7 @@ uvmalloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz)
       return 0;
     }
   }
+  
   return newsz;
 }
 
@@ -286,6 +306,7 @@ freewalk(pagetable_t pagetable)
       panic("freewalk: leaf");
     }
   }
+  
   kfree((void*)pagetable);
 }
 
@@ -294,8 +315,10 @@ freewalk(pagetable_t pagetable)
 void
 uvmfree(pagetable_t pagetable, uint64 sz)
 {
+  //vmprint(pagetable);
   if(sz > 0)
     uvmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, 1);
+  //vmprint(pagetable);
   freewalk(pagetable);
 }
 
@@ -314,10 +337,14 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   char *mem;
 
   for(i = 0; i < sz; i += PGSIZE){
-    if((pte = walk(old, i, 0)) == 0)
-      panic("uvmcopy: pte should exist");
-    if((*pte & PTE_V) == 0)
-      panic("uvmcopy: page not present");
+    if((pte = walk(old, i, 0)) == 0){
+	   continue;
+       panic("uvmcopy: pte should exist");
+    }
+    if((*pte & PTE_V) == 0){
+	   continue;	
+       panic("uvmcopy: page not present");
+    }
     pa = PTE2PA(*pte);
     flags = PTE_FLAGS(*pte);
     if((mem = kalloc()) == 0)
@@ -384,8 +411,11 @@ copyin(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len)
   while(len > 0){
     va0 = PGROUNDDOWN(srcva);
     pa0 = walkaddr(pagetable, va0);
-    if(pa0 == 0)
+    if(pa0 == 0){
+	  //printf("va = %p, sz = %p\n",va0,myproc()->sz);
+	  //vmprint(pagetable);
       return -1;
+    }
     n = PGSIZE - (srcva - va0);
     if(n > len)
       n = len;
@@ -440,3 +470,27 @@ copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
     return -1;
   }
 }
+
+int pteprint(pagetable_t pagetable,int level){  
+  for(int i = 0; i < 512; ++i){
+    pte_t *pte = &pagetable[i];
+    // level page table entry
+    if(*pte & PTE_V) {
+      // page table is valid
+      for(int j = 2; j > level; --j){
+         printf(".. ");
+      }
+      printf("..%d: pte %p pa %p\n\r",i,*pte,(pagetable_t)PTE2PA(*pte));
+      if(level >= 1){
+         pteprint((pagetable_t)PTE2PA(*pte),level-1);
+      }
+    } 
+  }
+
+  return 0;
+}
+
+void vmprint(pagetable_t pagetable){
+	pteprint(pagetable,2);
+}
+
diff --git a/time.txt b/time.txt
new file mode 100644
index 0000000..209e3ef
--- /dev/null
+++ b/time.txt
@@ -0,0 +1 @@
+20
