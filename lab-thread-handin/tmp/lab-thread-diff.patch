diff --git a/answers-thread.txt b/answers-thread.txt
new file mode 100644
index 0000000..d7c5ec5
--- /dev/null
+++ b/answers-thread.txt
@@ -0,0 +1 @@
+Why are there missing keys with 2 threads, but not with 1 thread? Identify a sequence of events with 2 threads that can lead to a key being missing. Submit your sequence with a short explanation in answers-thread.txt
diff --git a/notxv6/barrier.c b/notxv6/barrier.c
index 12793e8..2e79d76 100644
--- a/notxv6/barrier.c
+++ b/notxv6/barrier.c
@@ -4,6 +4,7 @@
 #include <assert.h>
 #include <pthread.h>
 
+
 static int nthread = 1;
 static int round = 0;
 
@@ -30,7 +31,16 @@ barrier()
   // Block until all threads have called barrier() and
   // then increment bstate.round.
   //
-  
+  pthread_mutex_lock(&bstate.barrier_mutex);
+  bstate.nthread++;
+  if(bstate.nthread == nthread){
+  	bstate.round += 1;
+  	bstate.nthread = 0;
+  	pthread_cond_broadcast(&bstate.barrier_cond);
+  }else{
+  	pthread_cond_wait(&bstate.barrier_cond,&bstate.barrier_mutex);
+  }
+  pthread_mutex_unlock(&bstate.barrier_mutex);
 }
 
 static void *
@@ -67,7 +77,6 @@ main(int argc, char *argv[])
   srandom(0);
 
   barrier_init();
-
   for(i = 0; i < nthread; i++) {
     assert(pthread_create(&tha[i], NULL, thread, (void *) i) == 0);
   }
diff --git a/notxv6/ph.c b/notxv6/ph.c
index 6df1500..9aeed26 100644
--- a/notxv6/ph.c
+++ b/notxv6/ph.c
@@ -13,6 +13,7 @@ struct entry {
   int value;
   struct entry *next;
 };
+pthread_mutex_t lock;
 struct entry *table[NBUCKET];
 int keys[NKEYS];
 int nthread = 1;
@@ -46,6 +47,8 @@ void put(int key, int value)
     if (e->key == key)
       break;
   }
+  
+  pthread_mutex_lock(&lock);
   if(e){
     // update the existing key.
     e->value = value;
@@ -53,6 +56,7 @@ void put(int key, int value)
     // the new is new.
     insert(key, value, &table[i], table[i]);
   }
+  pthread_mutex_unlock(&lock);
 }
 
 static struct entry*
@@ -102,11 +106,13 @@ main(int argc, char *argv[])
   pthread_t *tha;
   void *value;
   double t1, t0;
-
+	
   if (argc < 2) {
     fprintf(stderr, "Usage: %s nthreads\n", argv[0]);
     exit(-1);
   }
+
+  pthread_mutex_init(&lock, NULL);
   nthread = atoi(argv[1]);
   tha = malloc(sizeof(pthread_t) * nthread);
   srandom(0);
diff --git a/time.txt b/time.txt
new file mode 100644
index 0000000..9a03714
--- /dev/null
+++ b/time.txt
@@ -0,0 +1 @@
+10
\ No newline at end of file
diff --git a/user/uthread.c b/user/uthread.c
index 8e46826..c4283d9 100644
--- a/user/uthread.c
+++ b/user/uthread.c
@@ -10,11 +10,29 @@
 #define STACK_SIZE  8192
 #define MAX_THREAD  4
 
+struct context {
+  uint64 ra;
+  uint64 sp;
+
+  // callee-saved
+  uint64 s0;
+  uint64 s1;
+  uint64 s2;
+  uint64 s3;
+  uint64 s4;
+  uint64 s5;
+  uint64 s6;
+  uint64 s7;
+  uint64 s8;
+  uint64 s9;
+  uint64 s10;
+  uint64 s11;
+};
 
 struct thread {
   char       stack[STACK_SIZE]; /* the thread's stack */
   int        state;             /* FREE, RUNNING, RUNNABLE */
-
+  struct context context;       /* thread context */	
 };
 struct thread all_thread[MAX_THREAD];
 struct thread *current_thread;
@@ -63,8 +81,9 @@ thread_schedule(void)
      * Invoke thread_switch to switch from t to next_thread:
      * thread_switch(??, ??);
      */
+    thread_switch((uint64)&t->context,(uint64)&next_thread->context);
   } else
-    next_thread = 0;
+     next_thread = 0;
 }
 
 void 
@@ -76,7 +95,11 @@ thread_create(void (*func)())
     if (t->state == FREE) break;
   }
   t->state = RUNNABLE;
+  
   // YOUR CODE HERE
+  memset(&t->context,0,sizeof(struct context));
+  t->context.ra = (uint64)func;
+  t->context.sp = (uint64)t->stack + STACK_SIZE;
 }
 
 void 
diff --git a/user/uthread_switch.S b/user/uthread_switch.S
index 5defb12..410c1b3 100644
--- a/user/uthread_switch.S
+++ b/user/uthread_switch.S
@@ -1,11 +1,42 @@
 	.text
 
 	/*
-         * save the old thread's registers,
-         * restore the new thread's registers.
-         */
+     * save the old thread's registers,
+     * restore the new thread's registers.
+     */
 
 	.globl thread_switch
 thread_switch:
+
 	/* YOUR CODE HERE */
+	sd ra, 0(a0)
+    sd sp, 8(a0)
+    sd s0, 16(a0)
+    sd s1, 24(a0)
+    sd s2, 32(a0)
+    sd s3, 40(a0)
+    sd s4, 48(a0)
+    sd s5, 56(a0)
+    sd s6, 64(a0)
+    sd s7, 72(a0)
+    sd s8, 80(a0)
+    sd s9, 88(a0)
+    sd s10, 96(a0)
+    sd s11, 104(a0)
+
+    ld ra, 0(a1)
+    ld sp, 8(a1)
+    ld s0, 16(a1)
+    ld s1, 24(a1)
+    ld s2, 32(a1)
+    ld s3, 40(a1)
+    ld s4, 48(a1)
+    ld s5, 56(a1)
+    ld s6, 64(a1)
+    ld s7, 72(a1)
+    ld s8, 80(a1)
+    ld s9, 88(a1)
+    ld s10, 96(a1)
+    ld s11, 104(a1)
+    
 	ret    /* return to ra */
