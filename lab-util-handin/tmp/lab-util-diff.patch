diff --git a/Makefile b/Makefile
index 0fbaf7c..f3e461c 100644
--- a/Makefile
+++ b/Makefile
@@ -149,6 +149,11 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_sleep\
+	$U/_pingpong\
+	$U/_primes\
+	$U/_find\
+	$U/_xargs\
 
 
 ifeq ($(LAB),syscall)
diff --git a/gradelib.pyc b/gradelib.pyc
new file mode 100644
index 0000000..9c746e1
Binary files /dev/null and b/gradelib.pyc differ
diff --git a/time.txt b/time.txt
new file mode 100644
index 0000000..301160a
--- /dev/null
+++ b/time.txt
@@ -0,0 +1 @@
+8
\ No newline at end of file
diff --git a/user/find.c b/user/find.c
new file mode 100644
index 0000000..7fcf810
--- /dev/null
+++ b/user/find.c
@@ -0,0 +1,95 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/fs.h"
+
+char* getname(char *path)
+{
+  char *p;
+  // Find first character after last slash.
+  for(p=path+strlen(path); p >= path && *p != '/'; p--){}
+  // skip '/'
+  p++;
+  // Return blank-padded name.
+  return p;
+}
+
+void find(char *path,const char * filename)
+{
+  char buf[512], *p;
+  char *curr;
+  char *fname;
+  int fd;
+  struct dirent de;
+  struct stat st;
+
+  // open the dir
+  if((fd = open(path, 0)) < 0){
+    fprintf(2, "ls: cannot open %s\n", path);
+    return;
+  }
+  // open stat
+  if(fstat(fd, &st) < 0){
+    fprintf(2, "ls: cannot stat %s\n", path);
+    close(fd);
+    return;
+  }
+  // check the current the file is 
+  if(st.type != T_DIR){
+    fprintf(2, "the current the file is not dictionary\n", path);
+    close(fd);
+    return;
+  }
+
+  //read all the files under the dir
+  strcpy(buf, path);
+  p = buf + strlen(buf);
+  *p++ = '/';
+  while(read(fd, &de, sizeof(de)) == sizeof(de)){
+      if(de.inum == 0)
+          continue;
+      // skip "." and ".."
+      if(strcmp(de.name,".") == 0) continue;
+      if(strcmp(de.name,"..") == 0) continue;
+
+      curr = p;
+      memmove(curr, de.name, DIRSIZ);
+      curr[DIRSIZ] = 0;
+      if(stat(buf, &st) < 0){
+          printf("ls: cannot stat %s\n", buf);
+          continue;
+      }
+      // printf("current file name isï¼š%s \n",buf);
+      // record the current file
+      switch(st.type){
+        // we check the current file
+        case T_FILE:
+            fname = getname(buf);
+            if(strcmp(fname,filename) == 0){
+                printf("%s\n",buf);
+            }
+            break;
+        // we check the current dir
+        case T_DIR:
+            if(strlen(path) + 1 + DIRSIZ + 1 > sizeof(buf)){
+                printf("ls: path too long\n");
+                break;
+            }
+            find(buf,filename);
+            break;
+      }
+  }
+
+  close(fd);
+}
+
+int
+main(int argc, char *argv[])
+{
+  if(argc != 3){
+     printf("we need 3 paramters!\n");
+     exit(0);
+  }
+  find(argv[1],argv[2]);
+  exit(0);
+}
diff --git a/user/grep.c b/user/grep.c
index 19882b9..138a596 100644
--- a/user/grep.c
+++ b/user/grep.c
@@ -1,105 +1,95 @@
-// Simple grep.  Only supports ^ . * $ operators.
-
 #include "kernel/types.h"
 #include "kernel/stat.h"
 #include "user/user.h"
+#include "kernel/fs.h"
 
-char buf[1024];
-int match(char*, char*);
-
-void
-grep(char *pattern, int fd)
+char* getname(char *path)
 {
-  int n, m;
-  char *p, *q;
-
-  m = 0;
-  while((n = read(fd, buf+m, sizeof(buf)-m-1)) > 0){
-    m += n;
-    buf[m] = '\0';
-    p = buf;
-    while((q = strchr(p, '\n')) != 0){
-      *q = 0;
-      if(match(pattern, p)){
-        *q = '\n';
-        write(1, p, q+1 - p);
-      }
-      p = q+1;
-    }
-    if(m > 0){
-      m -= p - buf;
-      memmove(buf, p, m);
-    }
-  }
+  char *p;
+  // Find first character after last slash.
+  for(p=path+strlen(path); p >= path && *p != '/'; p--){}
+  // skip '/'
+  p++;
+  // Return blank-padded name.
+  return p;
 }
 
-int
-main(int argc, char *argv[])
+void find(char *path,const char * filename)
 {
-  int fd, i;
-  char *pattern;
+  char buf[512], *p;
+  char *curr;
+  char *fname;
+  int fd;
+  struct dirent de;
+  struct stat st;
 
-  if(argc <= 1){
-    fprintf(2, "usage: grep pattern [file ...]\n");
-    exit(1);
+  // open the dir
+  if((fd = open(path, 0)) < 0){
+    fprintf(2, "ls: cannot open %s\n", path);
+    return;
   }
-  pattern = argv[1];
-
-  if(argc <= 2){
-    grep(pattern, 0);
-    exit(0);
+  // open stat
+  if(fstat(fd, &st) < 0){
+    fprintf(2, "ls: cannot stat %s\n", path);
+    close(fd);
+    return;
   }
-
-  for(i = 2; i < argc; i++){
-    if((fd = open(argv[i], 0)) < 0){
-      printf("grep: cannot open %s\n", argv[i]);
-      exit(1);
-    }
-    grep(pattern, fd);
+  // check the current the file is 
+  if(st.type != T_DIR){
+    fprintf(2, "the current the file is not dictionary\n", path);
     close(fd);
+    return;
   }
-  exit(0);
-}
-
-// Regexp matcher from Kernighan & Pike,
-// The Practice of Programming, Chapter 9.
 
-int matchhere(char*, char*);
-int matchstar(int, char*, char*);
+  //read all the files under the dir
+  strcpy(buf, path);
+  p = buf + strlen(buf);
+  *p++ = '/';
+  while(read(fd, &de, sizeof(de)) == sizeof(de)){
+      if(de.inum == 0)
+          continue;
+      // skip "." and ".."
+      if(strcmp(de.name,".") == 0) continue;
+      if(strcmp(de.name,"..") == 0) continue;
 
-int
-match(char *re, char *text)
-{
-  if(re[0] == '^')
-    return matchhere(re+1, text);
-  do{  // must look at empty string
-    if(matchhere(re, text))
-      return 1;
-  }while(*text++ != '\0');
-  return 0;
-}
+      curr = p;
+      memmove(curr, de.name, DIRSIZ);
+      curr[DIRSIZ] = 0;
+      if(stat(buf, &st) < 0){
+          printf("ls: cannot stat %s\n", buf);
+          continue;
+      }
+      // printf("current file name isï¼š%s \n",buf);
+      // record the current file
+      switch(st.type){
+        // we check the current file
+        case T_FILE:
+            fname = getname(buf);
+            if(strcmp(fname,filename) == 0){
+                printf("%s\n",buf);
+            }
+            break;
+        // we check the current dir
+        case T_DIR:
+            if(strlen(path) + 1 + DIRSIZ + 1 > sizeof(buf)){
+                printf("ls: path too long\n");
+                break;
+            }
+            find(buf,filename);
+            break;
+      }
+  }
 
-// matchhere: search for re at beginning of text
-int matchhere(char *re, char *text)
-{
-  if(re[0] == '\0')
-    return 1;
-  if(re[1] == '*')
-    return matchstar(re[0], re+2, text);
-  if(re[0] == '$' && re[1] == '\0')
-    return *text == '\0';
-  if(*text!='\0' && (re[0]=='.' || re[0]==*text))
-    return matchhere(re+1, text+1);
-  return 0;
+  close(fd);
 }
 
-// matchstar: search for c*re at beginning of text
-int matchstar(int c, char *re, char *text)
+int
+main(int argc, char *argv[])
 {
-  do{  // a * matches zero or more instances
-    if(matchhere(re, text))
-      return 1;
-  }while(*text!='\0' && (*text++==c || c=='.'));
-  return 0;
+  if(argc != 3){
+     printf("we need 3 paramters!\n");
+     exit(0);
+  }
+  find(argv[1],argv[2]);
+  exit(0);
 }
-
diff --git a/user/pingpong.c b/user/pingpong.c
new file mode 100644
index 0000000..b0a02a7
--- /dev/null
+++ b/user/pingpong.c
@@ -0,0 +1,92 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+    int p1[2];
+    int p2[2];
+    
+    
+    if(argc > 1){
+       fprintf(2,"Only 1 argument is needed!\n");
+       exit(1);
+    }
+
+    // creat a pipe
+    pipe(p1);
+    pipe(p2);
+    // child
+    if(fork() == 0) {
+        char buffer[32];
+        //read from the parent
+        close(p1[1]);
+        close(p2[0]);
+        read(p1[0],buffer,4);
+        close(p1[0]);
+        // write a byte to the parent
+        printf("%d: received ping\n",getpid());
+        write(p2[1],"pong", 4);
+        close(p2[1]);
+    } else { 
+        char buffer[32];
+        // send a byte
+        close(p1[0]);
+        close(p2[1]);
+        write(p1[1],"ping",4);
+        close(p1[1]);
+        // receive from child
+        read(p2[0],buffer,4);
+        printf("%d: received pong\n",getpid());
+        close(p2[0]);
+    }
+    exit(0);
+}
+
+/*
+int main(int argc,char* argv[])
+{
+   if(argc>1)
+   {
+      fprintf(2,"Only 1 argument is needed!\n");
+      exit(1);
+   }	   
+   int p1[2];
+   int p2[2];
+   // char* s="a";
+   pipe(p1);
+   pipe(p2);
+   // write(p[1],s,1);
+   int pid;
+   if((pid=fork())<0)
+   {
+      fprintf(2,"fork error\n");
+      exit(1);
+   }
+   else if(pid==0)
+   {
+      close(p1[1]);
+      close(p2[0]);      
+      char buf[10];	   
+      read(p1[0],buf,4);  
+      close(p1[0]);
+     // printf("aa:%s\n",buf);
+      printf("%d: received %s\n",getpid(),buf);
+      write(p2[1],"pong",strlen("pong"));
+      close(p2[1]);
+   }
+   else
+   {   
+      close(p1[0]);
+      close(p2[1]);      
+      write(p1[1],"ping",strlen("ping")); 
+      close(p1[1]);     	
+      // wait(0);
+      char buf[10];   
+      read(p2[0],buf,4);
+      printf("%d: received %s\n",getpid(),buf);
+      close(p2[0]);
+   }  
+   exit(0);
+}*/
\ No newline at end of file
diff --git a/user/primes.c b/user/primes.c
new file mode 100644
index 0000000..912689b
--- /dev/null
+++ b/user/primes.c
@@ -0,0 +1,52 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+
+int process(const int * p){
+    int prime = 1;
+    int cnt = 0;
+    int num = 0;
+    int pip[2];
+    int status;
+
+    /*close p1*/
+    pipe(pip);
+    while(read(p[0],&num,4)){
+        if(num == 0) break;
+        if(prime == 1){
+            prime = num;
+            printf("prime %d\n",prime);
+        }else{
+            if(num%prime == 0) continue;
+            write(pip[1],&num,4);
+            cnt++;
+        }
+    }
+    close(p[0]);
+    close(pip[1]);
+    if(prime > 1){
+        if(fork() == 0){
+            process(pip);
+            exit(1);
+        }
+    }
+    wait(&status);
+    close(pip[0]);
+    return 0;
+}
+
+int
+main(int argc, char *argv[])
+{
+    int p[2];
+
+    pipe(p);
+    for(int i = 2; i <= 35; ++i){
+        write(p[1],&i,4);
+    }
+    close(p[1]);
+    process(p);
+    close(p[0]);
+    exit(0);
+}
diff --git a/user/sleep.c b/user/sleep.c
new file mode 100644
index 0000000..2d30180
--- /dev/null
+++ b/user/sleep.c
@@ -0,0 +1,17 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+  int wait = 0;
+  if(argc <= 1){
+    printf("sleep: need parameter error\n");
+    exit(0);
+  }
+  
+   wait = atoi(argv[1]);
+   sleep(wait);
+   exit(0);
+}
diff --git a/user/xargs.c b/user/xargs.c
new file mode 100644
index 0000000..6c27b1d
--- /dev/null
+++ b/user/xargs.c
@@ -0,0 +1,51 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/fs.h"
+#include "kernel/param.h"
+
+int main(int argc, char *argv[])
+{
+   char buf[512];
+   char *args[MAXARG];
+   char c;
+   char *p;
+   int n;
+   int status;
+
+   memset(buf,0,sizeof(buf));
+   memset(args,0,sizeof(args));
+   if(argc < 2){
+       printf("need more parameter!\n");
+       exit(0);
+   }
+
+   /*read from the file*/
+   for(int i = 1; i < argc; ++i){
+       args[i-1] = argv[i];
+   }
+   for(;;){
+     p = buf;
+     /*read each line from the stand input*/
+     while((n = read(0,&c,1)) && c != '\n'){
+        *p = c;
+        p++;
+     }
+     *p = '\0';
+     if(p != buf){
+        args[argc-1] = buf;
+        if(fork() == 0){
+            exec(argv[1],args);
+            exit(1);
+        }
+        wait(&status);
+     }
+     if(n == 0) break;
+     if(n < 0){
+        fprintf(2, "read error\n");
+        exit(1);
+     }
+   }
+
+   exit(0);
+}
