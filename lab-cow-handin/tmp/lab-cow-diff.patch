diff --git a/kernel/defs.h b/kernel/defs.h
index 4b9bbc0..d650ab5 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -63,6 +63,10 @@ void            ramdiskrw(struct buf*);
 void*           kalloc(void);
 void            kfree(void *);
 void            kinit(void);
+uint32          krefcount(void *);
+void            krefinc(void *pa);
+void            krefdec(void *pa);
+
 
 // log.c
 void            initlog(int, struct superblock*);
@@ -167,10 +171,13 @@ int             uvmcopy(pagetable_t, pagetable_t, uint64);
 void            uvmfree(pagetable_t, uint64);
 void            uvmunmap(pagetable_t, uint64, uint64, int);
 void            uvmclear(pagetable_t, uint64);
+int             uvmcowalloc(pagetable_t, uint64);
 uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+pte_t *         walk(pagetable_t,uint64,int);
+void            vmprint(pagetable_t);
 
 // plic.c
 void            plicinit(void);
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index fa6a0ac..84d9045 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -13,6 +13,7 @@ void freerange(void *pa_start, void *pa_end);
 
 extern char end[]; // first address after kernel.
                    // defined by kernel.ld.
+#define PA2IDX(pa) ((uint64)pa>>12)
 
 struct run {
   struct run *next;
@@ -21,12 +22,14 @@ struct run {
 struct {
   struct spinlock lock;
   struct run *freelist;
+  uint16 refcount[PA2IDX(PHYSTOP)];
 } kmem;
 
 void
 kinit()
 {
   initlock(&kmem.lock, "kmem");
+  memset(kmem.refcount,0,sizeof(kmem.refcount));
   freerange(end, (void*)PHYSTOP);
 }
 
@@ -51,9 +54,15 @@ kfree(void *pa)
   if(((uint64)pa % PGSIZE) != 0 || (char*)pa < end || (uint64)pa >= PHYSTOP)
     panic("kfree");
 
+  // memory page reference count 
+  if(krefcount(pa) > 0){
+  	 krefdec(pa);	 
+	 if(krefcount(pa) > 0)
+  	 	return;
+  }
+ 
   // Fill with junk to catch dangling refs.
   memset(pa, 1, PGSIZE);
-
   r = (struct run*)pa;
 
   acquire(&kmem.lock);
@@ -76,7 +85,30 @@ kalloc(void)
     kmem.freelist = r->next;
   release(&kmem.lock);
 
-  if(r)
+  if(r){
     memset((char*)r, 5, PGSIZE); // fill with junk
+    krefinc((void *)r);
+  }
+  
   return (void*)r;
 }
+
+uint32 krefcount(void *pa){
+	uint32 ret = 0;
+	acquire(&kmem.lock);
+	ret = kmem.refcount[PA2IDX(pa)];
+	release(&kmem.lock);
+	return ret;
+}
+
+void krefinc(void *pa){
+	acquire(&kmem.lock);
+	kmem.refcount[PA2IDX(pa)]++;
+	release(&kmem.lock);
+}
+
+void krefdec(void *pa){
+	acquire(&kmem.lock);
+	kmem.refcount[PA2IDX(pa)]--;
+	release(&kmem.lock);
+}
diff --git a/kernel/riscv.h b/kernel/riscv.h
index 0aec003..88c1f0a 100644
--- a/kernel/riscv.h
+++ b/kernel/riscv.h
@@ -331,6 +331,7 @@ sfence_vma()
 #define PTE_W (1L << 2)
 #define PTE_X (1L << 3)
 #define PTE_U (1L << 4) // 1 -> user can access
+#define PTE_COW (1L << 9) // cow page flag
 
 // shift a physical address to the right place for a PTE.
 #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
diff --git a/kernel/trap.c b/kernel/trap.c
index a63249e..7b56142 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -67,9 +67,17 @@ usertrap(void)
     syscall();
   } else if((which_dev = devintr()) != 0){
     // ok
-  } else {
-    printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
-    printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
+  } else if (r_scause() == 13 || r_scause() == 15){
+    uint64 va = r_stval();
+    // 超过最大地址或者在gurad page中报错
+    if (va >= MAXVA || (va <= PGROUNDDOWN(p->trapframe->sp) && va >= PGROUNDDOWN(p->trapframe->sp) - PGSIZE))
+    {
+      p->killed = 1;
+    }
+    else if (uvmcowalloc(p->pagetable, va) != 0)
+      p->killed = 1;
+  }
+  else{
     p->killed = 1;
   }
 
@@ -218,3 +226,35 @@ devintr()
   }
 }
 
+int
+cow_alloc(pagetable_t pagetable, uint64 va)
+{
+  uint64 pa;
+  pte_t *pte;
+  uint flags;
+
+  if (va >= MAXVA) return -1;
+
+  va = PGROUNDDOWN(va);
+  pte = walk(pagetable, va, 0);
+  if (pte == 0) return -1;
+
+  pa = PTE2PA(*pte);
+  if (pa == 0) return -1;
+
+  flags = PTE_FLAGS(*pte);
+
+  if (flags & PTE_COW)
+  {
+    char *ka = kalloc();
+    if (ka == 0) return -1;
+    memmove(ka, (char*)pa, PGSIZE);
+    kfree((void*)pa);
+    flags = (flags & ~PTE_COW) | PTE_W;
+    *pte = PA2PTE((uint64)ka) | flags;
+    return 0;
+  }
+  
+  return 0;
+}
+
diff --git a/kernel/vm.c b/kernel/vm.c
index bccb405..ae07ebe 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -5,6 +5,8 @@
 #include "riscv.h"
 #include "defs.h"
 #include "fs.h"
+#include "spinlock.h"
+#include "proc.h"
 
 /*
  * the kernel's page table.
@@ -311,20 +313,22 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   pte_t *pte;
   uint64 pa, i;
   uint flags;
-  char *mem;
 
   for(i = 0; i < sz; i += PGSIZE){
     if((pte = walk(old, i, 0)) == 0)
       panic("uvmcopy: pte should exist");
     if((*pte & PTE_V) == 0)
       panic("uvmcopy: page not present");
+	
     pa = PTE2PA(*pte);
     flags = PTE_FLAGS(*pte);
-    if((mem = kalloc()) == 0)
-      goto err;
-    memmove(mem, (char*)pa, PGSIZE);
-    if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
-      kfree(mem);
+    // clear PTE_W and mark the page as cow page.
+    if(flags & PTE_W){
+      flags = (flags | PTE_COW) & (~PTE_W);
+      *pte = PA2PTE(pa) | flags;
+    }
+    krefinc((void*)pa);
+    if(mappages(new, i, PGSIZE, pa, flags) != 0){
       goto err;
     }
   }
@@ -348,6 +352,41 @@ uvmclear(pagetable_t pagetable, uint64 va)
   *pte &= ~PTE_U;
 }
 
+int
+uvmcowalloc(pagetable_t pagetable, uint64 va)
+{
+  uint64 pa;
+  pte_t *pte;
+  uint flags;
+
+  if (va >= MAXVA) return -1;
+
+  va = PGROUNDDOWN(va);
+  pte = walk(pagetable, va, 0);
+  if (pte == 0) return -1;
+
+  pa = PTE2PA(*pte);
+  if (pa == 0) return -1;
+
+  flags = PTE_FLAGS(*pte);
+  if (flags & PTE_COW){  
+    flags = (flags & ~PTE_COW) | PTE_W;
+    /*if(krefcount((void *)pa) == 1){
+		*pte = PA2PTE(pa)|flags;
+		return 0;
+	}*/
+    char *ka = kalloc();
+    if (ka == 0) return -1;
+    memmove(ka, (char*)pa, PGSIZE);
+    kfree((void*)pa);
+    *pte = PA2PTE((uint64)ka) | flags;
+    return 0;
+  }
+  
+  return 0;
+}
+
+
 // Copy from kernel to user.
 // Copy len bytes from src to virtual address dstva in a given page table.
 // Return 0 on success, -1 on error.
@@ -358,6 +397,9 @@ copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
 
   while(len > 0){
     va0 = PGROUNDDOWN(dstva);
+    if (uvmcowalloc(pagetable, va0) != 0)
+      return -1;
+
     pa0 = walkaddr(pagetable, va0);
     if(pa0 == 0)
       return -1;
@@ -440,3 +482,4 @@ copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
     return -1;
   }
 }
+
diff --git a/time.txt b/time.txt
new file mode 100644
index 0000000..209e3ef
--- /dev/null
+++ b/time.txt
@@ -0,0 +1 @@
+20
diff --git a/user/cowtest.c b/user/cowtest.c
index 29b918f..08698b3 100644
--- a/user/cowtest.c
+++ b/user/cowtest.c
@@ -77,6 +77,7 @@ threetest()
       exit(-1);
     }
     if(pid2 == 0){
+	  // 子进程 pid 写入到内存种
       for(char *q = p; q < p + (sz/5)*4; q += 4096){
         *(int*)q = getpid();
       }
@@ -109,6 +110,7 @@ threetest()
     }
   }
 
+  printf("all pasted\n\r");
   if(sbrk(-sz) == (char*)0xffffffffffffffffL){
     printf("sbrk(-%d) failed\n", sz);
     exit(-1);
